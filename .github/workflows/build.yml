name: Build

# Run this workflow every time a new commit pushed to your repository
on: push

env:
  MSSQL_SA_PASSWORD: "YourStrong!Passw0rd"
  ACCEPT_EULA: "Y"
  MSSQL_PID: "developer"
  
jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  super-lint:
    # Name the Job
    name: Build, test, package and sign release
    # Set the type of machine to run on
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.200
      - name: Install MS SQL 2019
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install sql-server-2019
      - name: Build
        run: |
          dotnet clean --configuration Release
          dotnet nuget locals all --clear
          dotnet nuget restore
          dotnet build --configuration Release
      - name: Initialise RDMP
        run: dotnet Tools/rdmp/bin/Release/net5.0/rdmp.dll install localhost TEST_
      - name: Test Reusable code
        run: dotnet test "Reusable/Tests/ReusableCodeTests/ReusableCodeTests.csproj" --no-restore --verbosity normal
      - name: Test Core code
        run: dotnet test "./Rdmp.Core.Tests/Rdmp.Core.Tests.csproj" --no-restore --verbosity normal
      - name: Package
        run: |
          dotnet publish -r win-x64 -c Release -o PublishWindows
          dotnet publish -r linux-x64 -c Release -o PublishLinux --self-contained false
          
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash

      - name: Sign
        if: contains(github.ref, 'refs/tags/v')
        shell: cmd
        run: |
            powershell.exe -nologo -noprofile -command "& { [IO.File]::WriteAllBytes("GitHubActionsWorkflow.pfx", [System.Convert]::FromBase64String("${{ secrets.DIGICERT_PFX }}")); }"
            "C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool.exe" Sign /f GitHubActionsWorkflow.pfx /p ${{ secrets.DIGICERT_PASSWORD }} /fd sha256 /tr http://timestamp.digicert.com /td sha256 PublishWindows/*.dll PublishWindows/*.exe  PublishLinux/*.dll
            mkdir dist
            powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::CreateFromDirectory('Tools/rdmp/PublishWindows', 'dist/rdmp-cli-win-x64.zip'); [IO.Compression.ZipFile]::CreateFromDirectory('Tools/rdmp/PublishLinux', 'dist/rdmp-cli-linux-x64.zip'); }"
            git clone --recursive https://github.com/squirrel/squirrel.windows
            cd squirrel.windows
            nuget restore
            dotnet build --configuration Release
            msbuild /p:Configuration=Release
      
      - name: Nuget packages
        if: contains(github.ref, 'refs/tags/v')
        run: |
          nuget pack Plugins/Plugin/Plugin.nuspec -Properties Configuration=Release -IncludeReferencedProjects -Symbols -Version ${{ steps.get_version.outputs.VERSION }}
          nuget pack Plugins/Plugin.UI/Plugin.UI.nuspec -Properties Configuration=Release -IncludeReferencedProjects -Symbols -Version ${{ steps.get_version.outputs.VERSION }}
          nuget pack Plugins/Plugin.Test/Plugin.Test.nuspec -Properties Configuration=Release -IncludeReferencedProjects -Symbols -Version ${{ steps.get_version.outputs.VERSION }}
          nuget pack Application/ResearchDataManagementPlatform/RDMP.nuspec -Properties Configuration=Release -Version ${{ steps.get_version.outputs.VERSION }}
          nuget push HIC.RDMP.Plugin.${{ steps.get_version.outputs.VERSION }}.nupkg -Source https://api.nuget.org/v3/index.json -ApiKey #{NUGETKEY}
          nuget push HIC.RDMP.Plugin.UI.${{ steps.get_version.outputs.VERSION }}.nupkg -Source https://api.nuget.org/v3/index.json -ApiKey #{NUGETKEY}
          nuget push HIC.RDMP.Plugin.Test.${{ steps.get_version.outputs.VERSION }}.nupkg -Source https://api.nuget.org/v3/index.json -ApiKey #{NUGETKEY}
          
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            dist
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: contains(github.ref, 'refs/tags/v')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*.zip
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
